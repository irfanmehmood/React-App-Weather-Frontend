{"version":3,"sources":["components/lib/Cookie.js","components/lib/Reducer.js","components/lib/WeatherContext.js","components/weather/search/FoundCitiesList.js","components/weather/search/FindCity.js","components/weather/assets/Icon.js","components/weather/forecast/ForecastTemperaturesColumns.js","components/weather/forecast/ForecastTemperatures.js","components/weather/forecast/ForecastChart.js","components/weather/forecast/ForecastWindColumns.js","components/weather/forecast/ForecastWind.js","components/weather/todays/Place.js","components/weather/buttons/ChartButtons.js","components/weather/forecast/ForecastParent.js","components/weather/CityData.js","components/weather/BodyContainer.js","components/weather/buttons/StoredCitiesButtons.js","components/weather/WeatherWidget.js","App.js","serviceWorker.js","index.js"],"names":["Cookie","this","_cities","checkCookie","JSON","stringify","getDefaultCitiesArray","setCookie","id","name","cname","ca","document","cookie","split","i","length","c","charAt","substring","indexOf","cvalue","exdays","d","Date","setTime","getTime","expires","toUTCString","cookieName","getCookie","parse","value","reducer","state","action","type","SelectedCityID","WeatherData","StoredCities","ShowCityFinder","AddCityToCookie","AjaxLoading","payload","newStoredCities","forEach","city","push","cities","cityId","cityName","AddCityToListAndCookie","some","data","AddCityNameToCookieList","initialState","WeatherContext","createContext","FoundCitiesList","props","dispatch","useContext","citiesList","FoundCities","map","onClick","key","className","country","FindCity","useState","InputValue","setInputValue","setFoundCities","useEffect","axios","get","then","result","autoComplete","onChange","e","target","placeholder","Icon","size","sizeSmall","extraClassName","alt","title","src","icon","React","Component","ForecastTemperaturesColumns","selected","dateString","maxTemp","minTemp","ForecastTemperatures","forecastData","appState","minMaxDailyArray","benchmarkyDayMax","list","main","temp_max","benchmarkyDayMin","temp_min","datePart","dt_txt","substr","dateFromPart","weekdayName","weekday","getDay","weather","description","item","storedDateDataRowIndex","doesDateExistsInArrayThenGiveObject","dataRow","storedItem","max","min","date","pop","TemperatureColumns","index","Math","round","Arr","ForecastChart","xAxisLabels","xAxisTempValues","loopLength","temp","timeString","seriesData","options","toolbar","show","categories","labels","style","colors","fontSize","cssClass","offsetX","offsetY","tooltip","enabled","fontFamily","position","formatter","val","opt","series","height","ForecastWindColumns","styleArrowDegree","transform","deg","speed","ForecastWind","windArray","wind","WindColumns","Place","weatherData","t","setSeconds","getSeconds","timezone","countryLocalDayString","getUTCDay","countryLocalTimeHour","getUTCHours","countryLocalTimeMinutes","getUTCMinutes","ChartButtons","role","aria-label","href","toggleComponentDispay_Callback","DisplayToggleStatus","ForecastParent","showThisComponent","setDisplayToggleStatus","humidity","text","CountryData","BodyContainer","ComponentCityData","CityData","ComponentFindCity","CitiesButtons","Buttons","AddDisabled","removeDisabled","IsCityFinderComponentLoaded","disabled","WeatherWidget","BodyComponent","useReducer","Reducer","cityID","setAjaxLoading","Provider","StoredCitiesButtons","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0605c7d6.chunk.js","sourcesContent":["class CCookie {\r\n\r\n    constructor() {\r\n\r\n        this._cities = this.checkCookie('cities');\r\n        //console.log(this.cities);\r\n        //this._cities = JSON.stringify(this.getDefaultCitiesArray());\r\n        //this.setCookie('cities', this._cities);\r\n        if (this._cities === false) {\r\n            this._cities = JSON.stringify(this.getDefaultCitiesArray());\r\n            this.setCookie('cities', this._cities);\r\n        }        \r\n    }\r\n\r\n    getDefaultCitiesArray() {\r\n        return [\r\n                {id: 2643743,  name: 'London'},\r\n                {id: 6455259,  name: 'Paris'},\r\n                {id: 2759794,  name: 'Amsterdam'},\r\n                {id: 2950159,  name: 'Berlin'},\r\n                {id: 2618425,  name: 'Copenhagen'}\r\n        ];\r\n    }\r\n\r\n    get cities() {\r\n\r\n      return JSON.parse(this._cities);\r\n    }\r\n  \r\n    set cities(value) {\r\n\r\n      this._cities = JSON.stringify(value);\r\n      this.setCookie('cities', this._cities);\r\n    }\r\n\r\n    getCookie(cname){\r\n\r\n        let name = cname + \"=\";\r\n        let ca = document.cookie.split(';');\r\n\r\n        for(let i = 0; i < ca.length; i++) {\r\n\r\n            let c = ca[i];\r\n            while (c.charAt(0) === ' ') {\r\n                c = c.substring(1);\r\n            }\r\n            if (c.indexOf(name) === 0) {\r\n                return c.substring(name.length, c.length);\r\n            }\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n    setCookie(cname, cvalue, exdays = 100) {\r\n\r\n        let d = new Date();\r\n        d.setTime(d.getTime() + (exdays*24*60*60*1000));\r\n        let expires = \"expires=\"+ d.toUTCString();\r\n        document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\r\n    }\r\n\r\n    checkCookie(cookieName) {\r\n\r\n        return this.getCookie(cookieName);\r\n    }\r\n  }\r\n\r\n\r\n  export let Cookie = new CCookie();","import { Cookie } from './Cookie';\r\n\r\n    const initialState = {\r\n\r\n        SelectedCityID: Cookie.cities[0].id, \r\n        WeatherData: [],\r\n        StoredCities: Cookie.cities, \r\n        ShowCityFinder: false,\r\n        AddCityToCookie: false,\r\n        AjaxLoading: true\r\n    };\r\n  \r\n    function reducer(state, action) {\r\n\r\n        switch (action.type) {\r\n\r\n            case 'setAjaxLoading':\r\n\r\n                return {\r\n                    SelectedCityID: state.SelectedCityID, \r\n                    WeatherData: state.WeatherData,\r\n                    StoredCities: state.StoredCities, \r\n                    ShowCityFinder: state.ShowCityFinder,\r\n                    AddCityToCookie: state.AddCityToCookie,\r\n                    AjaxLoading: action.payload\r\n                };   \r\n                \r\n            case 'showCityFinder':\r\n\r\n                return {\r\n                    SelectedCityID: state.SelectedCityID, \r\n                    WeatherData: state.WeatherData,\r\n                    StoredCities: state.StoredCities, \r\n                    ShowCityFinder: true,\r\n                    AddCityToCookie: state.AddCityToCookie,\r\n                    AjaxLoading: state.AjaxLoading\r\n                };\r\n            \r\n            case 'removeCityFromList':\r\n\r\n                    if (state.StoredCities.length > 1) {\r\n\r\n                        let lastCityInList;\r\n                        let newStoredCities = [];\r\n                \r\n                        /* \r\n                         *  Copy cities list from state to new immutable list, \r\n                         *  excluding the city we just removed \r\n                         */\r\n                        state.StoredCities.forEach((city) => {\r\n                            if(city.id !== state.SelectedCityID) {\r\n                                newStoredCities.push(city);\r\n                            }\r\n                        });\r\n\r\n                        /** Save cities to cookie */\r\n                        Cookie.cities = newStoredCities;\r\n\r\n                        return {\r\n                            SelectedCityID: newStoredCities[newStoredCities.length-1], \r\n                            WeatherData: state.WeatherData,\r\n                            StoredCities: newStoredCities, \r\n                            ShowCityFinder: state.ShowCityFinder,\r\n                            AddCityToCookie: state.AddCityToCookie,\r\n                            AjaxLoading: state.AjaxLoading\r\n                        };\r\n                    }\r\n                    break;\r\n\r\n            case 'addNewCity':\r\n\r\n                if (state.StoredCities.length < 5) {\r\n\r\n                    let newStoredCities = [];\r\n\r\n                    /** Copy cities list from state to new immutable list */\r\n                    state.StoredCities.forEach((city) => {\r\n                        newStoredCities.push(city);\r\n                    });\r\n                   \r\n                    /** Add new cirty found to list */\r\n                    newStoredCities.push({id: action.payload.cityId, name: action.payload.cityName});\r\n\r\n                    /** Save cities to cookie */\r\n                    Cookie.cities = newStoredCities;\r\n                    //console.log(newStoredCities);\r\n\r\n                    return {\r\n                        SelectedCityID: newStoredCities[newStoredCities.length-1].id, \r\n                        WeatherData: state.WeatherData,\r\n                        StoredCities: newStoredCities, \r\n                        ShowCityFinder: state.ShowCityFinder,\r\n                        AddCityToCookie: true,\r\n                        AjaxLoading: state.AjaxLoading\r\n                    };\r\n                }\r\n                break;\r\n\r\n            case 'setWeatherData':\r\n\r\n                let AddCityToListAndCookie = false;\r\n                AddCityToListAndCookie = state.StoredCities.length > 5 ? false : true;\r\n                AddCityToListAndCookie = state.AddCityToCookie;\r\n\r\n                \r\n                if (AddCityToListAndCookie) {\r\n                    AddCityToListAndCookie = state.StoredCities.some((city) => !city.id === action.payload.city.id);\r\n                }\r\n\r\n                if (AddCityToListAndCookie) {\r\n                    Cookie.cities = [...state.StoredCities, action.payload.city];\r\n                }\r\n\r\n\r\n                return {\r\n                    SelectedCityID: state.SelectedCityID, \r\n                    WeatherData: action.payload.data,\r\n                    StoredCities: ( AddCityToListAndCookie ? [...state.StoredCities, action.payload.city] : state.StoredCities),                 \r\n                    ShowCityFinder: false,\r\n                    AddCityToCookie: false,\r\n                    AjaxLoading: false\r\n                };\r\n\r\n            case 'navCityButtonClicked':\r\n                /**\r\n                 * No need to change state if user is clicking same button,\r\n                 * As it will keep on firing API requeset\r\n                 */\r\n                if (state.SelectedCityID !== action.payload.cityId) {\r\n                    return {\r\n                        SelectedCityID: action.payload.cityId, \r\n                        WeatherData: state.WeatherData,\r\n                        StoredCities: state.StoredCities, \r\n                        ShowCityFinder: state.ShowCityFinder,\r\n                        AddCityToCookie: action.payload.AddCityNameToCookieList,\r\n                        AjaxLoading: state.AjaxLoading\r\n                    };\r\n                } else {\r\n                    return state;\r\n                }\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n  export default {reducer, initialState};","import {createContext} from 'react';\r\nexport const WeatherContext = createContext({});","import React, { useContext } from \"react\";\r\nimport {WeatherContext} from '../../lib/WeatherContext';\r\n\r\nfunction FoundCitiesList(props) {\r\n\r\n        const {dispatch} = useContext(WeatherContext);\r\n\r\n        var citiesList = '';\r\n\r\n        if (props.FoundCities !== null) {\r\n            citiesList =  props.FoundCities.map((city) =>\r\n                <li\r\n                    onClick={ \r\n                        () => dispatch({ \r\n                            type: 'addNewCity', \r\n                            payload: {\r\n                                'cityId' : city.id, \r\n                                'cityName': city.name\r\n                            }\r\n                        })\r\n                    }\r\n                    key={city.id} \r\n                    className=\"list-group-item d-flex justify-content-between align-items-center\">{city.name}\r\n                    <span className=\"badge badge-primary badge-pill\">{city.country}</span>\r\n                </li>\r\n            );\r\n        }\r\n        \r\n        return (\r\n            <>\r\n                <ul className=\"list-group\">\r\n                    {citiesList}\r\n                </ul>\r\n            </>\r\n        );\r\n  }\r\n\r\nexport default FoundCitiesList;","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport FoundCitiesList from './FoundCitiesList';\r\n\r\n\r\nfunction FindCity(props) {\r\n\r\n    const [InputValue, setInputValue] = useState('');\r\n    const [FoundCities, setFoundCities] = useState(null);\r\n\r\n    /** Fires either prop or state is changed */\r\n    useEffect(() => {\r\n        if (InputValue.length > 3) {\r\n            axios.get(`http://weather.digitalcook.co.uk:8001/api/city/find/${InputValue}`)\r\n            .then(result => {\r\n                setFoundCities(result.data);\r\n            });\r\n        }\r\n        return () => {\r\n            /** \r\n             * CLean up method\r\n             * without this I was getting console error about, component has been de-mounted\r\n             */\r\n        };\r\n    },[InputValue]);\r\n    \r\n    return (\r\n        <form className=\"search-city\" autoComplete=\"off\">\r\n        <label><h3 className='AddCity'>Add City</h3></label>\r\n        <input \r\n            type=\"text\" \r\n            name=\"name\"  \r\n            onChange={(e) => setInputValue(e.target.value)}\r\n            placeholder=\"Type your city name\"/>\r\n        <FoundCitiesList \r\n            FoundCities={FoundCities} />\r\n        </form>\r\n    );\r\n\r\n}\r\n\r\nexport default FindCity;","import React from \"react\";\r\n\r\nclass Icon extends React.Component {\r\n    render() {\r\n      const size = (this.props.sizeSmall === true ? '' : '@2x')\r\n      return <img className={`icon ${this.props.extraClassName}`} alt={this.props.title} title={this.props.title} src={`http://openweathermap.org/img/wn/${this.props.icon}${size}.png`}/>;\r\n    }\r\n}\r\n\r\nexport default Icon;","import React from \"react\";\r\nimport Icon from \"../assets/Icon\";\r\n\r\nfunction ForecastTemperaturesColumns(props) {\r\n\r\n      return (\r\n        <>\r\n            <div className={`col txtAnim five-day-single ${props.selected === true ? 'active' : \"\"}`} >\r\n                <p className=\"txtAnim weekday\">{props.dateString}</p>\r\n                <Icon icon={props.icon} title={props.title} sizeSmall={false} />\r\n                <p className='min-max'><span className='max-temp'>{props.maxTemp}&deg;</span> <span className='min-temp'>{props.minTemp}&deg;</span></p>\r\n            </div>                          \r\n        </>\r\n      )\r\n}\r\n\r\nexport default ForecastTemperaturesColumns;","import React, { useContext } from \"react\";\r\nimport { WeatherContext } from '../../lib/WeatherContext';\r\nimport ForecastTemperaturesColumns from \"./ForecastTemperaturesColumns\";\r\n\r\nfunction ForecastTemperatures() {\r\n\r\n      //console.log(forecastData.list);\r\n\r\n      const {appState} = useContext(WeatherContext);\r\n      const forecastData = appState.WeatherData[1];\r\n\r\n      let minMaxDailyArray = [];\r\n\r\n      /** We store first highest temp as benchmark value to be used for comparing  */\r\n      let benchmarkyDayMax = forecastData.list[0].main.temp_max;\r\n      let benchmarkyDayMin = forecastData.list[0].main.temp_min;\r\n      let datePart = forecastData.list[0].dt_txt.substr(0, 10);\r\n      let dateFromPart = new Date(datePart);\r\n      let weekdayName = weekday[dateFromPart.getDay()].substr(0, 3);\r\n      let icon = forecastData.list[0].weather[0].icon;\r\n      let description = forecastData.list[0].weather[0].icon;\r\n      \r\n\r\n      minMaxDailyArray.push(\r\n        {\r\n        'max' : benchmarkyDayMax, \r\n        'min' : benchmarkyDayMin, \r\n        'date' : datePart, \r\n        'weekday' : weekdayName,\r\n        'icon' : icon,\r\n        'description' : description\r\n        }\r\n      );\r\n\r\n\r\n      for (let i = 0; i < forecastData.list.length; i++) {\r\n\r\n        let item = forecastData.list[i];\r\n        let datePart = item.dt_txt.substr(0, 10);\r\n        let dateFromPart = new Date(datePart);\r\n\r\n        let storedDateDataRowIndex = doesDateExistsInArrayThenGiveObject(minMaxDailyArray, datePart);\r\n\r\n        if( storedDateDataRowIndex === false ) {\r\n          /** This date is not in the arra we add it, with current day max */\r\n\r\n          let dataRow = {\r\n            'max' : item.main.temp_max, \r\n            'min' : item.main.temp_min, \r\n            'date' : datePart, \r\n            'weekday' :  weekday[dateFromPart.getDay()].substr(0, 3),\r\n            'icon' : item.weather[0].icon,\r\n            'title' : item.weather[0].description\r\n          }\r\n          minMaxDailyArray.push(dataRow);                                             \r\n        } else {\r\n          /** Date Exist, Update min and max temperatures based on what is stored for current day and what we are looping  */\r\n         \r\n          let storedItem = minMaxDailyArray[storedDateDataRowIndex];\r\n          let icon = storedItem.icon;\r\n          let description = storedItem.description;\r\n\r\n          if (datePart + ' 09:00:00' === item.dt_txt) {\r\n            icon = item.weather[0].icon;\r\n            description = item.weather[0].description; \r\n          }\r\n\r\n          let dataRow = {\r\n            'max' : storedItem.max > item.main.temp_max ? storedItem.max : item.main.temp_max, \r\n            'min' : storedItem.min < item.main.temp_min ? storedItem.min : item.main.temp_min, \r\n            'date' : storedItem.date, \r\n            'weekday' :  storedItem.weekday,\r\n            'icon' : icon,\r\n            'title' : description\r\n          }\r\n\r\n          minMaxDailyArray[storedDateDataRowIndex] = dataRow;\r\n        }\r\n      \r\n      }\r\n\r\n      //console.log(minMaxDailyArray);\r\n\r\n      /** We need only 5 Days data not 6 */\r\n      if (minMaxDailyArray.length > 5){\r\n          minMaxDailyArray.pop();\r\n      }\r\n\r\n      const TemperatureColumns = minMaxDailyArray.map((item, index) =>\r\n        <ForecastTemperaturesColumns \r\n          key={index} \r\n          selected={index === 0 ? true : false}\r\n          dateString={item.weekday} \r\n          icon={item.icon} \r\n          title={item.title} \r\n          maxTemp={Math.round(item.max + (-273.15))}\r\n          /** We have the (index) which is always the same  */\r\n          minTemp={Math.round(item.min + (-273.15))} />\r\n      );\r\n\r\n      return (\r\n        <>\r\n            <div className='row five-day-single-con dailyTempsCont'>\r\n              {TemperatureColumns}\r\n            </div>                            \r\n        </>\r\n      )\r\n}\r\n\r\nexport default ForecastTemperatures;\r\n\r\nfunction doesDateExistsInArrayThenGiveObject(Arr, dateString) {\r\n   for (let i = 0; i < Arr.length; i++) {\r\n        let item = Arr[i];\r\n        if (item.date === dateString) {\r\n          return i;\r\n        }       \r\n   }\r\n   return false;\r\n}\r\n\r\nvar weekday = [];\r\nweekday[0] = \"Sunday\";\r\nweekday[1] = \"Monday\";\r\nweekday[2] = \"Tuesday\";\r\nweekday[3] = \"Wednesday\";\r\nweekday[4] = \"Thursday\";\r\nweekday[5] = \"Friday\";\r\nweekday[6] = \"Saturday\";","import React, { useContext} from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\nimport { WeatherContext } from \"../../lib/WeatherContext\";\r\n\r\n\r\nfunction ForecastChart(props) {\r\n\r\n        const {appState} = useContext(WeatherContext);\r\n        const forecastData = appState.WeatherData[1];\r\n\r\n        var xAxisLabels = [];\r\n        var xAxisTempValues = [];\r\n\r\n        for ( let i = 0; i < props.loopLength; i++ ) {\r\n            \r\n            let item = forecastData.list[i];\r\n            xAxisTempValues.push(Math.round(item.main.temp + (-273.15)));\r\n            let timeString = item.dt_txt.substr(11, 5);\r\n            xAxisLabels.push(timeString);\r\n        }\r\n\r\n        var seriesData = {\r\n            name: \"Temperature\",\r\n            data: xAxisTempValues };\r\n  \r\n            var xaxis = {\r\n                type: 'category',\r\n                categories: xAxisLabels,\r\n                labels: {\r\n                    style: {\r\n                        colors: [],\r\n                        fontSize: '14px',\r\n                        cssClass: 'apexcharts-xaxis-label',\r\n                    },\r\n                    offsetX: 0,\r\n                    offsetY: 0\r\n                },\r\n            };\r\n  \r\n        var gridData = { show: false };\r\n        \r\n        var chartData = { toolbar: { show: false } };\r\n        var colors = ['#FFD632'];\r\n        var markers = {\r\n            show: false\r\n        };\r\n        var options = { \r\n            'chart' : chartData , \r\n            'markers' : markers, \r\n            'colors': colors, \r\n            'xaxis' : xaxis,\r\n            'yaxis' : {tooltip: {\r\n                enabled: false,\r\n                offsetY: 0,\r\n                style: {\r\n                  fontSize: 0,\r\n                  fontFamily: 0,\r\n                },\r\n            }},\r\n            'grid' : gridData,\r\n            'fill':  {\r\n                'colors' : ['#FFF5CC', '#FFF5CC'],\r\n                'type': ['solid'],\r\n            },\r\n            'dataLabels': {\r\n                enabled: true,\r\n                position: 'top',\r\n                formatter: function(val, opt) {\r\n                    return val + '°C';\r\n                },\r\n                style: {\r\n                    colors: ['black']\r\n                },\r\n                offsetX: 0,\r\n                cssClass: 'apexcharts-xaxis-values',\r\n            },\r\n            'annotations': {\r\n                show: false\r\n            }\r\n              \r\n        };\r\n        var series = [];\r\n        series.push(seriesData);\r\n        \r\n        return (\r\n            <>\r\n                <div className=\"mixed-chart\">\r\n                    <Chart\r\n                        options={options}\r\n                        series={series}\r\n                        type=\"area\" \r\n                        height=\"200\"\r\n                    />\r\n                </div>\r\n            </> \r\n        )\r\n}\r\n\r\nexport default ForecastChart;","import React from \"react\";\r\n\r\nfunction ForecastWindColumns(props)\r\n{\r\n      const styleArrowDegree = {\r\n          transform:'rotate(' + props.item.deg + 'deg)'\r\n      };\r\n      return <div className=\"col txtAnim five-day-single\">\r\n        <p className='windSpeed'>{Math.round(props.item.speed * 1.60934)}<span className=\"supb\">kmh</span></p>\r\n        <p className='windIcon'><i className=\"fa fa-3x fa-arrow-circle-o-up\" style={styleArrowDegree}></i></p>\r\n        <p className='windTime'>{props.item.timeString}</p>\r\n      </div>;\r\n}\r\n\r\nexport default ForecastWindColumns;","import React, { useContext } from \"react\";\r\nimport {WeatherContext} from '../../lib/WeatherContext';\r\n\r\nimport ForecastWindColumns from \"./ForecastWindColumns\";\r\nfunction ForecastWind(props) {\r\n\r\n      const {appState} = useContext(WeatherContext);\r\n      const forecastData = appState.WeatherData[1];\r\n\r\n      let windArray = [];\r\n\r\n      for (let i = 0; i < props.loopLength; i++) {\r\n\r\n        let item = forecastData.list[i];\r\n        item.wind.timeString = item.dt_txt.substr(11, 5);\r\n        windArray.push(item.wind);\r\n      } \r\n      \r\n      const WindColumns = windArray.map((item, index) =>\r\n        <ForecastWindColumns item={item} key={index}/>\r\n      );\r\n\r\n      return (\r\n        <div className='row five-day-single-con'>\r\n          {WindColumns}\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default ForecastWind;","import React, { useContext } from \"react\";\r\nimport {WeatherContext} from '../../lib/WeatherContext';\r\nimport Icon from \"../assets/Icon\"\r\n\r\nfunction Place() {\r\n\r\n  const {appState} = useContext(WeatherContext);\r\n  const weatherData = appState.WeatherData[0];\r\n\r\n      const t = new Date();\r\n      t.setSeconds(t.getSeconds() + weatherData.timezone);\r\n      let countryLocalDayString = weekday[t.getUTCDay()];\r\n      let countryLocalTimeHour =  t.getUTCHours() < 10 ? '0' + t.getUTCHours() : + t.getUTCHours();\r\n      let countryLocalTimeMinutes =  t.getUTCMinutes() < 10 ? '0' + t.getUTCMinutes() : + t.getUTCMinutes() \r\n      \r\n      \r\n      return (\r\n        <>\r\n          <div className=\"place txtAnim\">\r\n            <h2 key=\"12\">{countryLocalDayString}, {countryLocalTimeHour}:{countryLocalTimeMinutes}</h2> \r\n            <h3 key=\"14\">{weatherData.weather[0].main}</h3>\r\n          </div>\r\n          <div className=\"clearfix temperature txtAnim\">\r\n          <Icon \r\n                icon={weatherData.weather[0].icon} \r\n                sizeSmall={false} \r\n                title={weatherData.weather[0].description} extraClassName={'float-left'}\r\n              />\r\n            <h2>{Math.round(weatherData.main.temp + (-273.15))}&deg;</h2>\r\n          </div>\r\n        </>\r\n      );\r\n\r\n}\r\n\r\nexport default Place;\r\n\r\nvar weekday = [];\r\nweekday[0] = \"Sunday\";\r\nweekday[1] = \"Monday\";\r\nweekday[2] = \"Tuesday\";\r\nweekday[3] = \"Wednesday\";\r\nweekday[4] = \"Thursday\";\r\nweekday[5] = \"Friday\";\r\nweekday[6] = \"Saturday\";","import React from \"react\";\r\n\r\nfunction ChartButtons(props) {\r\n\r\n      return (\r\n        <div className=\"btn-group\" role=\"group\" aria-label=\"Forecast\">\r\n            <button href=\"#\"\r\n            onClick={(e) => props.toggleComponentDispay_Callback('chart')} type=\"button\" className={`btn btn-secondary ${props.DisplayToggleStatus === 'chart' ? 'active' : ''}`}>Temp</button>\r\n            <button href=\"#\" onClick={() => props.toggleComponentDispay_Callback('wind')} type=\"button\" className={`btn btn-secondary ${props.DisplayToggleStatus === 'wind' ? 'active' : ''}`}>Wind</button>\r\n        </div>\r\n      );\r\n\r\n}\r\nexport default ChartButtons;","import React, { useContext, useState} from \"react\";\r\nimport {WeatherContext} from '../../lib/WeatherContext';\r\nimport ForecastTemperatures from \"./ForecastTemperatures\";\r\nimport ForecastChart from \"./ForecastChart\";\r\nimport ForecastWind from \"./ForecastWind\";\r\nimport Place from \"../todays/Place\";\r\nimport ChartButtons from \"../buttons/ChartButtons\";\r\n\r\nfunction ForecastParent(props) {\r\n\r\n        const {appState} = useContext(WeatherContext);\r\n        const weatherData = appState.WeatherData[0];\r\n        \r\n        const [DisplayToggleStatus, setDisplayToggleStatus] = useState('chart');\r\n        let showThisComponent;\r\n\r\n        function toggleComponentDispay_Callback(text) {\r\n            setDisplayToggleStatus(text);\r\n        }\r\n\r\n        switch(DisplayToggleStatus) {\r\n            case 'chart':\r\n                showThisComponent = <ForecastChart loopLength={5}/>\r\n            break;\r\n            case 'wind':\r\n                showThisComponent = <ForecastWind  loopLength={5} />\r\n            break;\r\n            default:\r\n                showThisComponent = <ForecastChart loopLength={5}/>\r\n            break;\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <div className=\"row\">\r\n                    <div className=\"col top-lft-col\">\r\n                        <Place />\r\n                    </div>\r\n                    <div className=\"col top-rgt-col\">\r\n                            <div className=\"col text-left\">\r\n                                <p className='todayDetails'>Humidity: {weatherData.main.humidity}%</p>\r\n                                <p className='todayDetails'>Wind: {weatherData.wind.speed}mph</p>\r\n                                <ChartButtons DisplayToggleStatus={DisplayToggleStatus} toggleComponentDispay_Callback={toggleComponentDispay_Callback} />\r\n                            </div>\r\n                    </div>\r\n                </div>\r\n                {showThisComponent}\r\n                <ForecastTemperatures />\r\n            </>\r\n        );\r\n}\r\nexport default ForecastParent;","import React from \"react\";\r\nimport ForecastParent from \"./forecast/ForecastParent\";\r\n\r\nfunction CountryData (props) {\r\n\r\n      return (\r\n        <>\r\n          <div className=\"forecastPrnt\">\r\n            <ForecastParent />\r\n          </div>             \r\n        </>\r\n      )\r\n}\r\n\r\nexport default CountryData;","import React, { useContext } from \"react\";\r\nimport {WeatherContext} from '../lib/WeatherContext';\r\nimport FindCity from './search/FindCity';\r\nimport CityData from \"./CityData\";\r\n\r\nfunction BodyContainer (props) {\r\n\r\n    const {appState} = useContext(WeatherContext);\r\n\r\n    let ComponentCityData = \r\n        (!appState.ShowCityFinder ? \r\n            <div className=\"CityData txtAnim\">\r\n                <CityData/>\r\n            </div> \r\n        : false\r\n    );\r\n\r\n    let ComponentFindCity = \r\n        (appState.ShowCityFinder === true ? \r\n        <div className=\"FindCity\">\r\n            <FindCity/>\r\n        </div> \r\n        : false\r\n        );\r\n\r\n    return (\r\n        <>\r\n            {ComponentCityData}\r\n            {ComponentFindCity}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BodyContainer;","import React, { useContext } from \"react\";\r\nimport { WeatherContext } from '../../lib/WeatherContext';\r\n\r\nfunction CitiesButtons(props) {\r\n\r\n  const {appState, dispatch} = useContext(WeatherContext);\r\n  const Buttons = appState.StoredCities.map((city) => \r\n    <button \r\n      key={city.id} \r\n      title={city.name}\r\n      className={`txtAnim tablinks ${appState.SelectedCityID === city.id ? 'active' : \"\"}`}\r\n      onClick={ \r\n          () => dispatch({ \r\n            type: 'navCityButtonClicked', \r\n            payload: {\r\n              'cityId' : city.id, \r\n              'AddCityNameToCookieList': false \r\n            }\r\n          })\r\n        }\r\n        >{ city.name.substring(0, 10) }\r\n      </button>\r\n  );\r\n\r\n  const AddDisabled = appState.StoredCities.length === 5 ? 'Disabled' : '';\r\n  const removeDisabled = (appState.StoredCities.length === 1 || props.IsCityFinderComponentLoaded === true )? 'Disabled' : '';\r\n\r\n  return (\r\n    <>\r\n            {Buttons}\r\n            <button disabled={AddDisabled} className=\"tablinks addLocation\" onClick={() => dispatch({type: 'showCityFinder'})}><i className=\"fa fa-plus\"></i></button>\r\n            <button disabled={removeDisabled} className=\"tablinks addLocation\" onClick={() => dispatch({type: 'removeCityFromList'})}><i className=\"fa fa-minus\"></i></button>                 \r\n    </>\r\n  );\r\n}\r\n\r\nexport default CitiesButtons;","import React, {useEffect, useReducer } from 'react';\r\nimport Reducer from '../lib/Reducer';\r\nimport axios from 'axios';\r\nimport BodyContainer from \"./BodyContainer\";\r\nimport StoredCitiesButtons from \"./buttons/StoredCitiesButtons\";\r\nimport {WeatherContext} from '../lib/WeatherContext';\r\n\r\nfunction WeatherWidget(props) {\r\n\r\n\r\n  const [appState, dispatch] = useReducer(Reducer.reducer, Reducer.initialState);\r\n\r\n  useEffect(() => {     \r\n      getDataFromApi(appState.SelectedCityID);\r\n  },[appState.SelectedCityID, appState.setAjaxLoading]);\r\n\r\n  function getDataFromApi(cityID) {\r\n    \r\n    dispatch({type: 'setAjaxLoading', payload: true});\r\n\r\n    axios.get(`http://weather.digitalcook.co.uk:8001/api/city/weather/${cityID}`)\r\n      .then(result => {\r\n        dispatch({\r\n            type: 'setWeatherData', \r\n            payload: { \r\n              data: result.data,\r\n              city: { id: result.data[0].id, name: result.data[0].name}\r\n            }\r\n        });\r\n    });\r\n  };\r\n\r\n  let BodyComponent;\r\n\r\n  if (appState.AjaxLoading === false) {\r\n    //console.log('Got Data Rendering');\r\n    BodyComponent = <BodyContainer />\r\n  } else {\r\n    BodyComponent = <p className='todayDetails'>Loading .....</p>;\r\n  }\r\n  \r\n  return ( \r\n    <WeatherContext.Provider value={{appState, dispatch}}>\r\n      <>\r\n          <div className=\"container widgetCont\">\r\n            <div className=\"tab\">\r\n              <StoredCitiesButtons />\r\n            </div>\r\n            {BodyComponent}\r\n          </div> \r\n      </>\r\n    </WeatherContext.Provider>\r\n  );\r\n}\r\n\r\nexport default WeatherWidget;\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport WeatherWidget from './components/weather/WeatherWidget'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <WeatherWidget />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}